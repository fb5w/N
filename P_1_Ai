#DFS
def dfs(graph , node ,visited):
if node not in visited :
print(node)
visited.add(node)
for neighbor in graph[node]:
dfs(graph,neighbor,visited)
graph={
’A’:[’B’,’D’],
’B’:[’C’,’F’],
’C’:[’E’,’G’],
’D’:[’F’],
’E’:[’F’],
’F’:[’A’],
’G’:[’E’]
}
dfs(graph,’A’,set())

#OUTPUT:
A
B
C
E
F
G
D



##############################################################################
#BFS
def bfs(graph,start):
visited, queue= set(),[start]
while queue:
vertex =queue.pop(0)
if vertex not in visited:
visited.add(vertex)
queue.extend(graph[vertex]-visited)
return visited
graph={
’A’:set([’B’,’D’]),
’B’:set([’C’,’F’]),
’C’:set([’E’,’G’]),
’D’:set([’F’]),
’E’:set([’F’]),
’F’:set([’A’]),
’G’:set([’E’])
}
bfs(graph,’A’)


#OUTPUT:
{’A’, ’B’, ’C’, ’D’, ’E’, ’F’, ’G’}

